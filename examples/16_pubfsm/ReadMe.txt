========================================================================
    CONSOLE APPLICATION : 14_16_pubfsm Project Overview
========================================================================

This project demonstrates the use of AREG framework features to build a
Finite-State Machine (FSM) with triggers, with timers and events. The
sources of FSM are generated by AREG SDK code generator tool. It as well
contains dynamically created models for service clients.

The project consists of 3 sub-projects:
    1. generated  (16_generated ) -- generated codes and common objects.
    2. pubservice (16_pubservice) -- contains services and the FSM.
    3. pubclient  (16_pubclient ) -- contains service clients.

All communications pass through mcrouter (multicasting router). Since in
AREG SDK the service discovery is automated and it provides fault tolerant
system, the sequence of processes to start does not play any role.

It automatically forms mist-network, where components receive connected or
disconnected notifications to start or stop calling remote methods.

////////////////////////////////////////////////////////////////////////

        1. Project 'generated' / 16_generated

Generated code of the HelloWorld.siml service interface document located
in './res' sub-folder. The document is created by an interface design tool
and compiled as a static library. In addition, it contains implementation
of objects that are used in other projects.

////////////////////////////////////////////////////////////////////////

        2. Project 'pubservice' / 16_pubservice

This project creates an instance of Public services that contain a finite
state-machine (FSM). A local service interacts with the user to change 
the states of FSM, to run or stop.

When the application starts, use one of commands:
-- "on" to imitate the power ON.
-- "sart" to start the run of FSM (as traffic light controller).
-- "stop" to stop the run of FSM (as traffic light controller).
-- "off" to imitate power OFF.
-- "quit" or "q", to exit applications. This also closes all clients.


////////////////////////////////////////////////////////////////////////

        3. Project 'pubclient' / 16_pubclient

This project contains an instance service client, which model is defined
dynamically during run-time. This approach guaranties to start and run
several instance of the same applications, where each instance of service
client (or provider) have generated and unique names.

When the application starts, use one of commands:
- Type "sn" to subscribe to one set of data updates.
- Type "ew" to subscribe to another set of data updates.
